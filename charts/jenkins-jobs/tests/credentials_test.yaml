suite: credentials tests
templates:
  - jcasc-jobs-config.yaml
tests:
  - it: should generate a folder with the associated (folder-level) credentials
    set:
      jobsDefinition:
        folder-a:
          name: Folder A
          kind: folder
          credentials:
            super-secret-str-with-no-description:
              secret: SuperSecretPassword
            api-token:
              description: API token for the cloud
              secret: "${DOCKER_HUB_TOKEN_PUSH}"
            dockerhub-user:
              description: Username and password for the Docker Hub
              username: user
              password: "${DOCKER_HUB_TOKEN_PUSH}"
            internalSensitiveBackoffice:
              username: "${ARTIFACTORY_API_INFRA_REPORTS_USERNAME}"
              usernameSecret: true
              password: "${ARTIFACTORY_API_INFRA_REPORTS_PASSWORD}"
            user-azure-serviceprincipal:
              azureEnvironmentName: "Azure"
              clientId: "${AZURE_CLIENT_ID}"
              clientSecret: "${AZURE_CLIENT_SECRET_VALUE}"
              description: "Azure Service Principal credential"
              subscriptionId: "${AZURE_SUBSCRIPTION_ID}"
              tenant: "${AZURE_TENANT_ID}"
            ssh-deploy-key:
              username: ${SSH_CHARTS_SECRETS_USERNAME}
              description: "SSH privkey used to access jenkins-infra/charts-secrets"
              privateKey: "${SSH_CHARTS_SECRETS_PRIVKEY}"
            kubeconfig-cik8s:
              fileName: "kubeconfig"
              description: "Kubeconfig file for cik8s"
              secretBytes: "${base64:${KUBECONFIG_CIK8S}}"
            bot-github-app:
              appId: "${GITHUB_APP_BOT_APPID}"
              privateKey: "${GITHUB_APP_BOT_KEY}"
            external-github-app:
              appId: 123456
              description: "Github App installed on the external GitHub organization 'lemmings'"
              owner: "lemmings"
              privateKey: "${GITHUB_APP_LEMMINGS}"
            aws-ec2-technical-account:
              accessKey: "${AWS_ACCESS_KEY_ID}"
              secretKey: "${AWS_SECRET_ACCESS_KEY}"
            aws-ec2-billing-account:
              accessKey: "${BILLING_AWS_ACCESS_KEY_ID}"
              secretKey: "${BILLING_AWS_SECRET_ACCESS_KEY}"
              iamRoleArn: "foo::bar"
              iamMfaSerialNumber: 123456789
              iamExternalId: billing-001
              stsTokenDuration: 300
    asserts:
      - equal:
          path: data["jobs-definition.yaml"]
          value: |-
            jobs:
              - script: >
                  folder('folder-a') {
                    displayName('Folder A')
                    description('Folder A')

                    properties {
                      folderCredentialsProperty {
                        domainCredentials {
                          domainCredentials {
                            domain {
                              name('Folder A')
                              description('Credentials for the job Folder A')
                            }

                            credentials {
                              awsCredentialsImpl {
                                scope('GLOBAL')
                                id('aws-ec2-billing-account')
                                description('aws-ec2-billing-account')
                                accessKey('${BILLING_AWS_ACCESS_KEY_ID}')
                                secretKey('${BILLING_AWS_SECRET_ACCESS_KEY}')
                                iamRoleArn('foo::bar')
                                iamMfaSerialNumber('1.23456789e+08')
                                iamExternalId('billing-001')
                                stsTokenDuration('300')
                              }
                              awsCredentialsImpl {
                                scope('GLOBAL')
                                id('aws-ec2-technical-account')
                                description('aws-ec2-technical-account')
                                accessKey('${AWS_ACCESS_KEY_ID}')
                                secretKey('${AWS_SECRET_ACCESS_KEY}')
                                iamRoleArn('')
                                iamMfaSerialNumber('')
                                iamExternalId('')
                              }
                              usernamePassword {
                                scope('GLOBAL')
                                id('dockerhub-user')
                                description('Username and password for the Docker Hub')
                                username('user')
                                password('${DOCKER_HUB_TOKEN_PUSH}')
                                usernameSecret(false)
                              }
                              usernamePassword {
                                scope('GLOBAL')
                                id('internalSensitiveBackoffice')
                                description('internalSensitiveBackoffice')
                                username('${ARTIFACTORY_API_INFRA_REPORTS_USERNAME}')
                                password('${ARTIFACTORY_API_INFRA_REPORTS_PASSWORD}')
                                usernameSecret(true)
                              }
                            }
                          }
                        }
                      }
                    }

                    configure { node ->
                      def configNode = node / 'properties' /  'com.cloudbees.hudson.plugins.folder.properties.FolderCredentialsProvider_-FolderCredentialsProperty' /  'domainCredentialsMap' / 'entry' / 'java.util.concurrent.CopyOnWriteArrayList'

                      configNode << 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl'(plugin: 'plain-credentials') {
                        scope('GLOBAL')
                        id('api-token')
                        description('API token for the cloud')
                        secret(hudson.util.Secret.fromString('${DOCKER_HUB_TOKEN_PUSH}').getEncryptedValue())
                      }
                      configNode << 'org.jenkinsci.plugins.github__branch__source.GitHubAppCredentials'(plugin: 'github-branch-source') {
                        scope('GLOBAL')
                        id('bot-github-app')
                        description('bot-github-app')
                        appID('${GITHUB_APP_BOT_APPID}')
                        privateKey('''${GITHUB_APP_BOT_KEY}''')
                      }
                      configNode << 'org.jenkinsci.plugins.github__branch__source.GitHubAppCredentials'(plugin: 'github-branch-source') {
                        scope('GLOBAL')
                        id('external-github-app')
                        description('Github App installed on the external GitHub organization 'lemmings'')
                        appID('123456')
                        privateKey('''${GITHUB_APP_LEMMINGS}''')
                        owner(lemmings)
                      }

                      configNode << 'org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl' {
                        scope('GLOBAL')
                        id('kubeconfig-cik8s')
                        description('Kubeconfig file for cik8s')
                        fileName('kubeconfig')
                        secretBytes(com.cloudbees.plugins.credentials.SecretBytes.fromBytes(new String('${base64:${KUBECONFIG_CIK8S}}').decodeBase64()).toString())
                      }
                      configNode << 'com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey' {
                        scope('GLOBAL')
                        id('ssh-deploy-key')
                        description('SSH privkey used to access jenkins-infra/charts-secrets')
                        username('${SSH_CHARTS_SECRETS_USERNAME}')
                        usernameSecret(false)
                        privateKeySource(class:"com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey\$DirectEntryPrivateKeySource") {
                          privateKey('''${SSH_CHARTS_SECRETS_PRIVKEY}''')

                        }
                      }

                      configNode << 'org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl'(plugin: 'plain-credentials') {
                        scope('GLOBAL')
                        id('super-secret-str-with-no-description')
                        description('super-secret-str-with-no-description')
                        secret(hudson.util.Secret.fromString('SuperSecretPassword').getEncryptedValue())
                      }

                      configNode << 'com.microsoft.azure.util.AzureCredentials'(plugin: 'azure-credentials') {
                        scope('GLOBAL')
                        id('user-azure-serviceprincipal')
                        description('Azure Service Principal credential')
                        data {
                          subscriptionId(hudson.util.Secret.fromString('${AZURE_SUBSCRIPTION_ID}').getEncryptedValue())
                          clientId(hudson.util.Secret.fromString('${AZURE_CLIENT_ID}').getEncryptedValue())
                          clientSecret(hudson.util.Secret.fromString('${AZURE_CLIENT_SECRET_VALUE}').getEncryptedValue())
                          tenant(hudson.util.Secret.fromString('${AZURE_TENANT_ID}').getEncryptedValue())
                          azureEnvironmentName('Azure')
                        }
                      }
                    }
                  }
