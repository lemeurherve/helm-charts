name: Test Charts
on:
  push: null
  pull_request: null
  workflow_dispatch: null
env:
  UNITTEST_VERSION: v0.3.4
jobs:
  find-modified-charts-with-unit-tests:
    runs-on: ubuntu-latest
    # outputs:
    #   modified_charts_with_unit_tests: ${{ steps.find-modified-charts-with-unit-tests.outputs.modified_charts_with_unit_tests }}
    steps:
      - uses: actions/checkout@v3
      - id: list_modified_charts_with_unit_tests
        name: List modified charts with unit tests
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # gh pr view ${{ github.event.pull_request.number }} --json files -q '.files[].path' | xargs dirname | grep "^charts/" | grep -v "/templates/tests" | grep "/tests" | cut -d "/" -f 2 | sort --unique > modified_charts_with_unit_tests.txt
          
          # Retrieve the list of modified folder names
          modifiedFolders=$(gh pr view ${{ github.event.pull_request.number }} --json files -q '.files[].path' | xargs dirname)
          # Extract charts with unit tests from the modified folders
          modifiedChartsWithUnitTests=$(echo $modifiedFolders | grep "^charts/" | grep -v "/templates/tests" | grep "/tests" | cut -d "/" -f 2 | sort --unique)
          
          # Transform the multiline value into a JSON array
          jsonArray=$(echo $modifiedChartsWithUnitTests | jq --raw-input -slurp 'split("\n") | map(select(length > 0))')

          # Print the JSON array
          echo "$jsonArray"
                    
          # Store the chart name(s) as JSON if there are results
          if [ -n "$modifiedChartsWithUnitTests" ]; then
            echo "modified_charts_with_unit_tests={\"chart\": $jsonArray}" >> "$GITHUB_OUTPUT"
          else
            echo "modified_charts_with_unit_tests=''" >> "$GITHUB_OUTPUT"
          fi

      # - name: 'Set output in the matrix format'
      #   id: set-output
      #   run: echo "modified_charts_with_unit_tests={\"dir\":${{ steps.changed-files.outputs.all_changed_files }}}" >> "$GITHUB_OUTPUT"

  # do-stuff:
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.find-out-changes.outputs.changed_directories != '' }}  # Without it, the strategy parser will fail if the changed_directories is empty.
  #   strategy:
  #     matrix: ${{fromJson(needs.find-out-changes.outputs.changed_directories)}}
  #   needs:
  #     - find-out-changes
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: zip ${{ matrix.dir }} etc.



  unit-tests:
    runs-on: ubuntu-latest
    if: ${{ needs.find-modified-charts-with-unit-tests.outputs.modified_charts_with_unit_tests != '' }}  # Without it, the strategy parser will fail if the changed_directories is empty.
    strategy:
      matrix: ${{fromJson(needs.find-modified-charts-with-unit-tests.outputs.modified_charts_with_unit_tests)}}
        # chart:
        #   - accountapp
        #   - artifact-caching-proxy
        #   - httpredirector
        #   - jenkins-jobs
        #   - jenkins-kubernetes-agents
        #   - mirrorbits
        #   - plugin-health-scoring
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get Tools Versions
        id: tools-versions
        run: |
          current_helm_version="$(curl --silent --location https://raw.githubusercontent.com/jenkins-infra/docker-helmfile/main/Dockerfile  | grep 'ARG' | grep 'HELM_VERSION=' | sort -u | cut -d'=' -f2)"
          echo "CURRENT_HELM_VERSION=${current_helm_version}" >> $GITHUB_OUTPUT
      - name: Set up Helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3
        with:
          version: "${{ steps.tools-versions.outputs.CURRENT_HELM_VERSION }}"
      - name: install helm unittests
        run: |
          helm env
          # Repeat 2 times to fight against network errors in  GHA runners
          # Always return true
          helm plugin install https://github.com/helm-unittest/helm-unittest --version ${UNITTEST_VERSION} \
            || helm plugin install https://github.com/helm-unittest/helm-unittest --version ${UNITTEST_VERSION} \
            || true
          # Fail if not installed
          helm plugin list | grep unittest
      - name: run unit tests
        working-directory: ./charts/
        run: |
          helm unittest "${{ matrix.chart }}"
